IMPLEMENTATION stm32h743 {
  DEVICE_KIND [] {
    STRUCT {
      UINT32 OFFSET;
      ENUM [ BYTE, HALFWORD, WORD, DOUBLEWORD ] SIZE;
      STRUCT {
        UINT32 LOC;
      } BIT [];
      STRUCT {
        UINT32 START;
        UINT32 STOP;
      } FIELD [];
    } REGISTER [];
    STRUCT {
      IDENTIFIER ENABLE [];
      BOOLEAN ACK = FALSE;
    } EVENT [];
  };
  
  DEVICE [] {
    DEVICE_KIND_TYPE KIND;
    UINT32 ADDRESS;
    INTERRUPT_TYPE VECTOR;
  };

  OS {
    BOOLEAN [
      TRUE {
        ENUM [
          serial {
            UINT32 RXBUFFER = 32;
            UINT32 TXBUFFER = 16;
          }
        ] LIBRARY[];
      },
      FALSE
    ] BUILD = FALSE;

    /* trace */
    BOOLEAN [
      TRUE {
        ENUM [
          serial
        ] FORMAT = serial;
      },
      FALSE
    ] TRACE = FALSE;
  };
};

CPU stm32h743 {
  OS features {
    ISR2_PRIORITY_MASKING = TRUE;
  };

  CORTEX stm32h743 {
    PRIO_BITS = 4;    // used in tpl_cortex_definitions for NVIC config. 16 levels.
    /* TODO */ CLOCK = 40000000; // init freq with no external oscillator...
  };

  BUILDOPTIONS buildOptions {
     COMMONFLAGS = "-DSTM32H743xx"; //processor def
  };

  INTERRUPT_COUNT nb_it {
    IT_TABLE_SIZE = 165;
  };

  #include "interruptDefs.oil"

/*----------------------------------------------------------------------------*/

  PLATFORM_FILES stm32h743 {
    PATH = "cortex-m/armv7em/stm32h743";
    CFILE = "handlers_stm32h743.c";
    CFILE = "startup_stm32h743.c";
    CFILE = "system_stm32h7xx.c";
    CFILE = "tpl_machine_stm32h743.c";
  };

  PLATFORM_FILES stm32h743_trace {
    PATH = "cortex-m/armv7em/stm32h743";
	  CFILE = "tpl_trace.c";
  };

  PLATFORM_FILES stm32h743_cmsis {
    PATH = "cortex-m/armv7em/stm32h743/CMSIS/Device/ST/STM32H7xx/Include";
  };

  PLATFORM_FILES stm32IO {
    PATH    = "cortex-m/armv7em/stm32h743/lib";
    CFILE   = "pinAccess.c";
  };

  LIBRARY serial {
    PATH = "cortex-m/armv7em/stm32l432/lib";
	  CHEADER = "serial.h";
	  CFILE   = "serial.c";
  };

  POSTBUILD all {
    COMMAND buildbin {
      TYPE = COPIER;
      INPUT = TARGET;
      OUTPUT = ".bin";
      PREOPTION = "-O binary";
    };
  };

  POSTCOMMAND burn { /* TODO not the same memory mapping */
    COMMAND flash {
      MESSAGE = "Flashing";
      COMMAND = "st-flash";
      INPUT = TARGET { EXT = ".bin"; };
      PREOPTION = "write";
      POSTOPTION = "0x8000000";
    };
  };
};
