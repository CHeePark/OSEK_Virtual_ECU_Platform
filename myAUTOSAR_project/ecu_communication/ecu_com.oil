OIL_VERSION = "4.0"; 

IMPLEMENTATION trampoline {
    TASK { UINT32 STACKSIZE = 32768; }; // 모든 태스크 기본 스택 크기 32KB 
    ISR { UINT32 STACKSIZE = 32768; }; // 모든 인터럽트 서비스 루틴 기본 스택 크기 32KB
};

// ECU_A 시스템 정의
CPU ECU_A_SYSTEM {
  OS config { 
    STATUS = EXTENDED; // 확장 에러 체크 모드 활성화(디버깅 시 더 많은 에러 검출)
    
    TRACE = TRUE {      // <--- 이 블록을 추가하거나 확인
      FORMAT = json;    // 추적 결과를 json 파일 형식으로 저장
      PROC = TRUE;      // Task 관련 이벤트 추적 활성화
      EVENT = TRUE;     // Event 관련 이벤트 추적 활성화
    };
    
    BUILD = TRUE { // 빌드 자동화 설정 활성화
      APP_SRC = "ecu_com.c"; // 컴파일할 메인 소스 파일
      TRAMPOLINE_BASE_PATH = "../.."; // Trampoline OS 소스 경로
      APP_NAME = "ecu_com_exe"; // 생성될 실행 파일 이름
      LINKER = "gcc"; // 링커로 GCC 사용 - POSIX/Linux 환경에서 표준
      SYSTEM = PYTHON; // 빌드 스크립트를 Python으로 실행(크로스 플랫폼 지원)
    };
  };

  APPMODE stdAppmode {}; // main문에서 사용할 app모드

  // CAN 인터페이스 계층에서 메시지 수신을 처리하는 태스크
  TASK Task_CanIf_RxIndication {
    PRIORITY = 1; // CAN 메시지 수신을 1등으로
    AUTOSTART = FALSE; //알람에 의해서만 활성화되도록 설계
    ACTIVATION = 1; // 동시 활성화 인스턴스 1개(메시지 처리 순서 보장)
    //activation=2이면, 대기열에 다음 task 대기
    SCHEDULE = FULL; // preemptive 스케줄링 
    EVENT = Event_PDU_Received; // Event 이름
  };

  // PDU 라우터 계층에서 수신된 PDU를 처리하는 태스크
  // PDU(Protocol Data Unit)는 Data묶음 표준 단위(CAN,LIN 등)
  // PDU 라우터는 수신된 PDU를 적절한 신호으로 분리하여
  // 애플리케이션 계층에 전달하는 역할을 함
  TASK Task_PduR_RxIndication {
    PRIORITY = 2;
    AUTOSTART = TRUE { APPMODE = stdAppmode; };
    //stdAppmode를 main에서 수행 시, 이 task 자동 실행(autostart=true)
    // false인 경우, 알람에 의해서 활성화 해야함
    ACTIVATION = 1; 
    SCHEDULE = FULL; 
    EVENT = Event_PDU_Received; // CanIf와 같은 이벤트 사용
  };

  // 애플리케이션에서 신호 데이터를 최종 처리하는 태스크
  TASK Task_Application_Process {
    PRIORITY = 3; 
    AUTOSTART = TRUE { APPMODE = stdAppmode; }; 
    ACTIVATION = 1; 
    SCHEDULE = FULL; 
    EVENT = Event_Signal_Available; // 별도 이벤트 사용(신호 처리 완료 event)
  };
  
  COUNTER SystemCounter {};

  // CAN 메시지 수신알람
  ALARM Alarm_Simulate_CAN_Rx {
    COUNTER = SystemCounter; // 시스템 기본 카운터 사용
    ACTION = ACTIVATETASK { TASK = Task_CanIf_RxIndication; }; // 알람 시 CanIf 태스크 활성화
    AUTOSTART = TRUE { APPMODE = stdAppmode; ALARMTIME = 100; CYCLETIME = 100; }; 
    // ALARMTIME: 최초 시작 시간(보통 시스템 초기화 시간 확보 위함)
    // CYCLETIME: 이후 반복 주기(몇 틱마다 모니터링 할 것인가)
  };

  // PDU(Protocol Data Unit) 수신 완료를 알리는 이벤트
  EVENT Event_PDU_Received {
    MASK = AUTO; // 이벤트 마스크 비트 자동 할당 
                 //시스템이 겹치지 않는 비트 값 자동 설정
  };
  
  // 신호 데이터 처리 가능을 알리는 이벤트
  EVENT Event_Signal_Available {
    MASK = AUTO; 
  };
};